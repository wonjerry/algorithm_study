/*
  계단 오르는 문제, 1, 2계단씩 올라갈 수 있을 때 n번째 계단까지 올라가는데 생길 수 있는 모든 경우의 수를 구하는 문제.
  잘 생각해 보면 n번째 계단에 도달하기 전에 n-1, n-2번째 계단까지 도달 해야 n번째 계단으로 갈 수 있다.
  즉 n-1번째 n-2번째 계단까지 도달하는 경우의 수를 더하면 n번째 계단에 도달하게 된다.

  이 문제의 유형을 모르고 풀었다면 재귀로 먼저 풀었을 것이며, 면접자는 더 최적화 해 보라고 했을 것이다.

  Dynamic programming의 목적은 결국엔 중복되는 계산을 줄이는 것이며 우리는 재귀 결과값을 memoization을 통해 저장 해 두고 꺼내쓸 수 있다.
  따라서 다음과 같은 정답을 구할 수 있다.
*/
const d = [1, 1, 2]
var climbStairs = function(n) {
  if (d[n]) return d[n]
  return d[n] = climbStairs(n - 1) + climbStairs(n - 2)
};
